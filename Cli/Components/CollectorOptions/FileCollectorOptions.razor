@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData
@using Microsoft.CST.AttackSurfaceAnalyzer.Cli

<input id="enableFileSystemCollectionCheckbox" type="checkbox" @bind="appData.CollectOptions.EnableFileSystemCollector" />
<label for="enableFileSystemCollectionCheckbox">Enable FileSystem Collector</label>

<input id="enableGatherHashesCheckbox" type="checkbox" @bind="appData.CollectOptions.GatherHashes" />
<label for="enableGatherHashesCheckbox">Gather File Hashes</label>

<input id="enableCrawlArchivesCheckbox" type="checkbox" @bind="appData.CollectOptions.CrawlArchives" />
<label for="enableCrawlArchivesCheckbox">Crawl into Archives</label>

<input id="enableDownloadCloudCheckbox" type="checkbox" @bind="appData.CollectOptions.DownloadCloud" />
<label for="enableDownloadCloudCheckbox">Download Cloud Files</label>

<label for="selectedDirectoriesString">Add Path to Scan</label>
<input id="selectedDirectoriesString" type="text" @bind="SelectedDirectoryInput" /><button @onclick="PushInputToList">Add</button>

<label for="selectedDirectoriesList">Selected Directories</label>
<select class="@directorySelectElementGlowClass.ClassName" id="selectedDirectoriesList" @bind="SelectedDirectoryTop">
    @for (var i = 0; i < appData.CollectOptions.SelectedDirectories.Count; i++)
    {
        <option value="@i">@appData.CollectOptions.SelectedDirectories[i]</option>
    }
</select>
<button @onclick="RemoveInputFromList">Remove</button>

@code{
    Helper.GlowClass directorySelectElementGlowClass = new Helper.GlowClass();

    string SelectedDirectoryInput;
    int SelectedDirectoryTop;

    void RemoveInputFromList()
    {
        if (appData.CollectOptions.SelectedDirectories.Count > SelectedDirectoryTop)
        {
            appData.CollectOptions.SelectedDirectories.RemoveAt(SelectedDirectoryTop);
            Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), directorySelectElementGlowClass, false);
        }
    }

    void PushInputToList()
    {
        appData.CollectOptions.SelectedDirectories.Add(SelectedDirectoryInput);
        SelectedDirectoryTop = appData.CollectOptions.SelectedDirectories.Count - 1;
        Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), directorySelectElementGlowClass, true);
        SelectedDirectoryInput = string.Empty;
    }
}